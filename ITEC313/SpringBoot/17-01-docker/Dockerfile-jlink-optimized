# Multi-stage build to create a minimal JRE with jlink
FROM eclipse-temurin:21-jdk-alpine AS jre-builder

# Install necessary tools for jlink
RUN apk add --no-cache binutils

# Create a custom JRE with only the modules needed for Spring Boot
# These modules are typically required for a Spring Boot web application
RUN jlink \
    --add-modules java.base,java.logging,java.xml,java.naming,java.desktop,java.management,java.security.jgss,java.instrument,java.scripting,jdk.unsupported \
    --strip-debug \
    --no-man-pages \
    --no-header-files \
    --compress=2 \
    --output /opt/jre

# Build stage
FROM alpine:latest AS builder

# Install necessary build tools
RUN apk add --no-cache openjdk21-jdk maven

WORKDIR /app

# Copy Maven files
COPY pom.xml .
COPY mvnw .
COPY .mvn .mvn

# Download dependencies
RUN ./mvnw dependency:go-offline -B

# Copy source code
COPY src ./src

# Build the application with layers enabled
RUN ./mvnw clean package -DskipTests

# Extract layers
RUN mkdir -p target/dependency && (cd target/dependency; jar -xf ../*.jar)

# Runtime stage
FROM alpine:latest

# Install necessary runtime dependencies
RUN apk add --no-cache libc6-compat

# Copy the custom JRE from the jre-builder stage
COPY --from=jre-builder /opt/jre /opt/jre

# Create a non-root user
RUN addgroup -S spring && adduser -S spring -G spring

# Set the working directory
WORKDIR /app

# Copy the application layers from the builder stage
COPY --from=builder /app/target/dependency/BOOT-INF/lib /app/lib
COPY --from=builder /app/target/dependency/META-INF /app/META-INF
COPY --from=builder /app/target/dependency/BOOT-INF/classes /app

# Switch to non-root user
USER spring:spring

# Set the PATH to use our custom JRE
ENV PATH="/opt/jre/bin:${PATH}"

# Expose the application port
EXPOSE 8080

# Run the application
ENTRYPOINT ["java", "-cp", "app:app/lib/*", "hello.Application"]
