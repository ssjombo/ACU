type Query {
    bookById(id: ID): Book
    books(first: Int, after: String, search: String, genre: String, orderBy: BookOrderBy): BookConnection
    genres: [Genre!]!
    genreById(id: ID): Genre
    booksByGenre(genreId: ID!, first: Int, after: String): BookConnection
    reviewsByBook(bookId: ID!): [Review!]!
    reviewsByUser(userId: ID!): [Review!]!
    reviewById(id: ID!): Review
}

enum BookOrderBy {
    NAME
    PAGE_COUNT
    GENRE
}

type Mutation {
    createBook(input: CreateBookInput!): Book
    createAuthor(input: CreateAuthorInput!): Author
    createGenre(input: CreateGenreInput!): Genre
    updateBook(id: ID!, input: UpdateBookInput!): Book
    updateGenre(id: ID!, input: UpdateGenreInput!): Genre
    deleteBook(id: ID!): Boolean
    deleteGenre(id: ID!): Boolean
    addGenreToBook(bookId: ID!, genreId: ID!): Book
    removeGenreFromBook(bookId: ID!, genreId: ID!): Book
    createReview(input: CreateReviewInput!): Review
    updateReview(id: ID!, input: UpdateReviewInput!): Review
    deleteReview(id: ID!): Boolean
}

type Book {
    id: ID
    name: String
    pageCount: Int
    genre: String
    genres: [Genre!]!
    author: Author
    reviews: [Review] # Field-level security: Only ADMIN users can see reviews
    averageRating: Float
    reviewCount: Int
}

type Author {
    id: ID
    firstName: String
    lastName: String
}

type Genre {
    id: ID
    name: String
    description: String
    books: [Book!]!
}

type Review {
    id: ID!
    bookId: String!
    userId: String!
    rating: Int!
    comment: String
    createdAt: String!
    book: Book
    user: User
}

type User {
    id: ID!
    username: String!
    role: String!
    reviews: [Review!]!
}

input CreateBookInput {
    name: String!
    pageCount: Int!
    authorId: String!
    genre: String!
}

input CreateAuthorInput {
    firstName: String!
    lastName: String!
}

input CreateGenreInput {
    name: String!
    description: String
}

input UpdateBookInput {
    name: String
    pageCount: Int
    authorId: String
    genre: String
}

input UpdateGenreInput {
    name: String
    description: String
}

input CreateReviewInput {
    bookId: String!
    rating: Int!
    comment: String
}

input UpdateReviewInput {
    rating: Int
    comment: String
}

type BookConnection {
    edges: [BookEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type BookEdge {
    cursor: String!
    node: Book!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}
