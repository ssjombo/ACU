<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>JavaFX-HelloWorld</artifactId>
    <version>1.0</version>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <javafx.version>21.0.2</javafx.version>
    </properties>
    <!-- Provide an (empty) dependencyManagement section so plugins expecting it (e.g., dependency:analyze-exclusions)
         don't encounter a null reference. -->
    <dependencyManagement>
        <dependencies/>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>
    </dependencies>
    <!-- Distribution management added to allow 'mvn deploy' without specifying -DaltDeploymentRepository -->
    <distributionManagement>
        <!-- Local file-based repository for releases -->
        <repository>
            <id>local-releases</id>
            <name>Local Releases</name>
            <url>file://${project.build.directory}/maven-repo/releases</url>
        </repository>
        <!-- Local file-based repository for snapshots -->
        <snapshotRepository>
            <id>local-snapshots</id>
            <name>Local Snapshots</name>
            <url>file://${project.build.directory}/maven-repo/snapshots</url>
        </snapshotRepository>
    </distributionManagement>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <release>21</release>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>com.example.App</mainClass>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.8</version>
                <executions>
                    <execution>
                        <!-- Default configuration for running -->
                        <!-- Usage: mvn clean javafx:run -->
                        <id>default-cli</id>
                        <configuration>
                            <mainClass>com.example.App</mainClass>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.panteleyev</groupId>
                <artifactId>jpackage-maven-plugin</artifactId>
                <version>1.6.5</version>
                <configuration>
                    <!-- When invoking jpackage goal directly you must clean first (mvn clean jpackage:jpackage) -->
                    <force>true</force>
                    <name>JavaFX-HelloWorld</name>
                    <appVersion>${project.version}</appVersion>
                    <vendor>Example</vendor>
                    <destination>target/dist</destination>
                    <input>target</input>
                    <mainJar>JavaFX-HelloWorld-1.0.jar</mainJar>
                    <mainClass>com.example.App</mainClass>
                    <type>APP_IMAGE</type>
                    <javaOptions>
                        <option>-Dfile.encoding=UTF-8</option>
                        <option>--module-path</option>
                        <option>lib</option>
                        <option>--add-modules</option>
                        <option>javafx.controls,javafx.fxml</option>
                    </javaOptions>
                </configuration>
                <executions>
                    <execution>
                        <id>default-cli</id>
                        <phase>package</phase>
                        <goals>
                            <goal>jpackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>cleanup-old-app-image</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <!-- Remove previously generated .app bundle to avoid jpackage failure -->
                                <delete dir="${project.build.directory}/dist/JavaFX-HelloWorld.app" failonerror="false"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>3.7.1</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <includeScope>runtime</includeScope>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
